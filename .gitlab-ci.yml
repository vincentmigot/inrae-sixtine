 
########################
##  GLOBAL VARIABLES 
########################
variables:
 GIT_DEPTH: 5
 GIT_OPTIONS: "--allow-unrelated-histories"
 # GLOBAL
 # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
 # when running from the command line.
 MAVEN_CLI_OPTS: "--batch-mode --show-version "
 # DEFAULT SERVER MAVEN VERSION
 MVN_VERSION: 3.6.3
 # DEFAULT SERVER JAVA VERSION
 JAVA_VERSION: 11
 REVISION: 'INSTANCE-SNAPSHOT'
 # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
 # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
 MAVEN_CACHE_FOLDER: "$CI_PROJECT_DIR/.m2/repository"
 MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
 YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/cache_yarn"
 NODE_CACHE: "$CI_PROJECT_DIR/opensilex-dev/.node"
 EMBDED_MONGO_CACHE: "/root/.embedmongo/"
 MODULE_ID: "inrae-sixtine"

########################
##  CACHE TEMPLATE
########################

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_BUILD_JOB_NAME"'
.cache_dependencies: &cache_dependencies
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - $YARN_CACHE_FOLDER
      - $MAVEN_CACHE_FOLDER
      - $NODE_CACHE
      - $EMBDED_MONGO_CACHE

########################
##  BUILD TEMPLATE
########################

.build:instance: &build_template_with_opensilex
  <<: *cache_dependencies
  before_script:
    # Enable extended pattern for mv command
    - shopt -s extglob
    # Download and unzip latest artifact from opensilex-dev
    - cd $CI_PROJECT_DIR
    - rm -rf $REVISION
    - 'curl --location --output artifacts.zip --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://forgemia.inra.fr/api/v4/projects/1675/jobs/artifacts/master/download?job=opensilex:build"'
    - unzip -o artifacts.zip
    # Clone original opensilex-dev sources
    - cd $CI_PROJECT_DIR
    - mkdir -p $CI_PROJECT_DIR/opensilex-dev
    - cd opensilex-dev
    - git init
    - git pull https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/opensilex-dev.git
    # Ensure to load same commit as used to generate opensilex-dev artifact
    - |
      if [ ! -z "$COMMIT_SHA_OPENSILEX_DEV" ]; then
        git checkout $COMMIT_SHA_OPENSILEX_DEV
      fi
    - cd phis-ws
    - git init
    - git pull https://gitlab-ci-token:${CI_JOB_TOKEN}@forgemia.inra.fr/OpenSILEX/phis-ws.git modularity
    # Ensure to load same commit as used to generate phis artifact
    - |
      if [ ! -z "$COMMIT_SHA_PHIS" ]; then
        git checkout $COMMIT_SHA_PHIS
      fi  
    # Build opensilex-dev for module compilation
    - cd $CI_PROJECT_DIR/opensilex-dev
    - mvn clean install $MAVEN_CLI_OPTS -Pfor-module -Drevision=$REVISION
  stage: build
  image: maven:$MVN_VERSION-jdk-$JAVA_VERSION
  except:
    - schedules

########################
##  SIXTINE BUILD INSTANCE
######################## 

sixtine:build:
  <<: *build_template_with_opensilex
  script:
    # Create module folder if not exists
    - mkdir -p $CI_PROJECT_DIR/opensilex-dev/$MODULE_ID
    # Remove everything in module folder except "node_modules" folder
    - cd $CI_PROJECT_DIR/opensilex-dev/$MODULE_ID
    - rm -rf !(node_modules)
    # Copy all module project sources into opensilex-dev folder
    - cd $CI_PROJECT_DIR
    - mv !(.m2|cache_yarn|opensilex-dev|$REVISION) $CI_PROJECT_DIR/opensilex-dev/$MODULE_ID
    # Build module inside openxilex-dev directory structure
    - cd $CI_PROJECT_DIR/opensilex-dev/$MODULE_ID
    - mvn install $MAVEN_CLI_OPTS -Drevision=$REVISION
    # Copy generated JAR module into opensilex-dev artifact "modules" folder
    - mv $CI_PROJECT_DIR/opensilex-dev/$MODULE_ID/target/$MODULE_ID-$REVISION.jar $CI_PROJECT_DIR/$REVISION/modules/$MODULE_ID.jar
  artifacts:
    paths:
      - $CI_PROJECT_DIR/$REVISION
      
trigger:sixtine:deploy:test:
  stage: deploy
  image: curlimages/curl
  script:
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form "ref=master" --form "variables[COMMIT_SHA_OPENSILEX_DEV]=$COMMIT_SHA_OPENSILEX_DEV" --form "variables[COMMIT_SHA_PHIS]=$COMMIT_SHA_PHIS" https://forgemia.inra.fr/api/v4/projects/403/trigger/pipeline
  needs: 
    - job: "sixtine:build"